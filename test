import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sam
 */
public class TaschenrechnerForm extends javax.swing.JFrame implements java.util.EventListener{
    
int opt;
double number1, number2;
double bruch1, bruch2, bruch3, bruch4;
double answer = 0;


    /**
     * Creates new form TaschenrechnerForm
     */
    public TaschenrechnerForm() {
        
        initComponents();
        getContentPane().setBackground(Color.BLACK);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        rechenfeld = new javax.swing.JTextField();
        plusButton = new javax.swing.JButton();
        minusButton = new javax.swing.JButton();
        malButton = new javax.swing.JButton();
        durchButton = new javax.swing.JButton();
        Titlelabel = new javax.swing.JLabel();
        hoch2 = new javax.swing.JButton();
        wurzel2 = new javax.swing.JButton();
        Clearbutton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        answerLabel = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Taschenrechner");
        setBackground(new java.awt.Color(0, 51, 51));

        rechenfeld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechenfeldActionPerformed(evt);
            }
        });

        plusButton.setText("+");
        plusButton.setToolTipText("add");
        plusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusButtonActionPerformed(evt);
            }
        });

        minusButton.setText("-");
        minusButton.setToolTipText("subtract");
        minusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusButtonActionPerformed(evt);
            }
        });

        malButton.setText("*");
        malButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                malButtonActionPerformed(evt);
            }
        });

        durchButton.setText("/");
        durchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durchButtonActionPerformed(evt);
            }
        });

        Titlelabel.setBackground(new java.awt.Color(0, 0, 0));
        Titlelabel.setForeground(new java.awt.Color(255, 255, 255));
        Titlelabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titlelabel.setText("Taschenrechner");

        hoch2.setText("x²");
        hoch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hoch2ActionPerformed(evt);
            }
        });

        wurzel2.setText("√");
        wurzel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wurzel2ActionPerformed(evt);
            }
        });

        Clearbutton.setText("Clear");
        Clearbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearbuttonActionPerformed(evt);
            }
        });

        answerLabel.setColumns(20);
        answerLabel.setRows(5);
        jScrollPane3.setViewportView(answerLabel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Titlelabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(plusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minusButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(malButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(durchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hoch2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wurzel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Clearbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 89, Short.MAX_VALUE))
            .addComponent(rechenfeld)
            .addComponent(jScrollPane3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Titlelabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rechenfeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plusButton)
                    .addComponent(minusButton)
                    .addComponent(malButton)
                    .addComponent(durchButton)
                    .addComponent(hoch2)
                    .addComponent(wurzel2)
                    .addComponent(Clearbutton)))
        );

        pack();
    }// </editor-fold>                        
    public void auslesenalles(Integer z2, String feld, String[] feldauslesen){
        int zaeler = 0;
        int zaeler2 = 0;
        String[] substrings = new String[z2+1];
        String[] zeichen = new String[z2];
        for (int i = 0;i<feld.length(); i++){
            if(feldauslesen[i].equals("/") || feldauslesen[i].equals("+") || feldauslesen[i].equals("-") || feldauslesen[i].equals("*") || feldauslesen[i].equals("^") || feldauslesen[i].equals("√")){
                substrings[zaeler2] = feld.substring(zaeler,i);
                zeichen[zaeler2] = feld.substring(i,i+1);
                zaeler = i+1; 
                zaeler2++;     
            }  
        }
        substrings[zaeler2] = feld.substring(zaeler,feld.length());
        double[] zahlen = new double[substrings.length];
        for(int i=0; i<substrings.length;i++){  
        zahlen[i] = Double.parseDouble(substrings[i]);
        }
        rechenoptionen(zahlen, zeichen);
        
    }
    public void rechenoptionen(double[] zahlen, String[] zeichen){
        double[] zwischenergebnisse = new double[zeichen.length];
        for(int i=0;i<zeichen.length;i++){
            switch(zeichen[i]){
                case "/":
                    zwischenergebnisse[i]= (zahlen[i] / zahlen[i+1]);
                    for(int k=i+1;k<zeichen.length;k++){
                        if(zeichen[k].equals("/")){
                            zwischenergebnisse[k-1] /= zahlen[k+1];
                            i += k;
                        }
                    }
                    System.out.println(zwischenergebnisse[0]);
                    break;
                case "*":
                    answer = (zahlen[i] * zahlen[i+1]);
                    for(int k=i+1;k<zeichen.length;k++){
                        if(zeichen[k].equals("*")){
                            answer = answer * zahlen[k+1];
                            i += k;
                        }
                    }
                    break;
                default:
                    break;
                    
            }
        }
        for(int i=0;i<zeichen.length;i++){ 
            switch(zeichen[i]){
                case "+":
                    if(i!=0){
                        answer += zahlen[i+1];
                    }
                    else{
                        answer += (zahlen[i] + zahlen[i+1]);
                    }
                    break;
                case "-":
                    if(i!=0){
                        answer -= zahlen[i+1];
                    }
                    else{
                        answer -= (zahlen[i] - zahlen[i+1]);
                    }
                    break;
                default:
                    break;
            } 
        }  
        System.out.println(answer);
        answer = 0;
    }
    /*
    public void rechenoptionen(){
        switch(opt){
            case 1: 
                answer = number1 + number2;
                break;
            case 2:
                answer = number1 - number2;
                break;
            case 3:
                answer = number1 / number2;
                break;
            case 4: 
                answer = number1 * number2;
                break;
            case 5:
                answer = Math.pow(number1, number2);
                break;
            case 6:
                answer = Math.pow(number2, 1.0/number1);
                break;
            case 7:
                answer = bruch1/bruch2 + bruch3/bruch4;
                break;
            case 8:
                answer = bruch1/bruch2 - bruch3/bruch4;
                break;
            case 9:
                answer = (bruch1/bruch3) / (bruch2/bruch4);
                break;
            case 10:
                answer = (bruch1*bruch3) / (bruch2*bruch4);
                break;
            case 11:
                answer = Math.pow((bruch1/bruch2), (bruch3/bruch4));
                break;
            case 12:
                answer = Math.pow((bruch3/bruch4), (1.0/(bruch1/bruch2)));
                break;
            default:
                break;
        }
        this.answerLabel.append(this.rechenfeld.getText() + " = " + answer + "\n");
        this.rechenfeld.setText("");
    }
    public void auslesenbrüche(String[] nummer1, String feld){
        int u =0;
        int k = 0;
        for (int i = 0; i<feld.length() ; i++) {
            switch (nummer1[i]) {
                case "+":
                    opt = 7;
                    break;
                case "-":
                    opt = 8;
                    break;
                case "*":
                    opt = 10;
                    break;
                case "^":
                    opt = 11;
                    break;
                case "√":
                    opt = 12;
                    break;
                default:
                    break;
            }
            if(nummer1[i].equals("/") || nummer1[i].equals("+") || nummer1[i].equals("-") || nummer1[i].equals("*") || nummer1[i].equals("^") || nummer1[i].equals("√")){
                switch(u){
                    case 0:
                        bruch1 = Double.parseDouble(feld.substring(0,i));
                        k = i;
                        u++;
                        break;
                    case 1:
                        bruch2 = Double.parseDouble(feld.substring(k+1,i));
                        k = i;
                        u++;
                        break;
                    case 2:
                        bruch3 = Double.parseDouble(feld.substring(k+1,i));
                        bruch4 = Double.parseDouble(feld.substring(i+1,feld.length()));
                        break;
                    default:
                        break;
                    
                }  
            } 
        }
        rechenoptionen();
    }
    public void ausleseneinfach(String[]nummer1, String feld){
        for (int i = 0; i<feld.length() ; i++) {
            switch (nummer1[i]) {
                case "+":
                    number1 = Double.parseDouble(feld.substring(0,i));
                    number2 = Double.parseDouble(feld.substring(i+1,feld.length()));
                    opt = 1;
                    break;
                case "-":
                    number1 = Double.parseDouble(feld.substring(0,i));
                    number2 = Double.parseDouble(feld.substring(i+1,feld.length()));
                    opt = 2;
                    break;
                case "/":
                    number1 = Double.parseDouble(feld.substring(0,i));
                    number2 = Double.parseDouble(feld.substring(i+1,feld.length()));
                    opt = 3;
                    break;
                case "*":
                    number1 = Double.parseDouble(feld.substring(0,i));
                    number2 = Double.parseDouble(feld.substring(i+1,feld.length()));
                    opt = 4;
                    break;
                case "^":
                    number1 = Double.parseDouble(feld.substring(0,i));
                    number2 = Double.parseDouble(feld.substring(i+1,feld.length()));
                    opt = 5;
                    break;
                case "√":
                    number1 = Double.parseDouble(feld.substring(0,i));
                    number2 = Double.parseDouble(feld.substring(i+1,feld.length()));
                    opt = 6;
                    break;
                default:
                    break;
            }
	}
        rechenoptionen();
    }*/
    public void auslesen(){
	String feld = this.rechenfeld.getText();
	String[] feldauslesen = new String[feld.length()];
	for (int i = 0;i<feld.length(); i++) {
            feldauslesen[i] = feld.valueOf(feld.charAt(i));
        }
        int z1 = 0;
        int z2 = 0;
        for(int i = 0;i<feld.length(); i++) {
            if(feldauslesen[i].equals("+") || feldauslesen[i].equals("-") || feldauslesen[i].equals("*") || feldauslesen[i].equals("^") || feldauslesen[i].equals("√")){
                z2++;     
            }
            if(feldauslesen[i].equals("/")){
                z1++;
                z2++;
            }
        }
        auslesenalles(z2, feld, feldauslesen);
    /*switch (z1) {
        case 2:
            auslesenbrüche(feldauslesen, feld);
            break;
        case 3:
            opt = 9;
            auslesenbrüche(feldauslesen, feld);
            break;
        default:
            ausleseneinfach(feldauslesen, feld);
            break;
    }*/
    }
    
    private void plusButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        this.rechenfeld.setText(rechenfeld.getText() + "+");
    }                                          
        
    private void minusButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        this.rechenfeld.setText(rechenfeld.getText() + "-");
    }                                           
        
    private void durchButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        this.rechenfeld.setText(rechenfeld.getText() + "/");
    }                                           

    private void malButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        this.rechenfeld.setText(rechenfeld.getText() + "*");
    }                                         

    private void rechenfeldActionPerformed(java.awt.event.ActionEvent evt) {                                           
        this.rechenfeld.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e){
                if(e.getKeyCode()== KeyEvent.VK_ENTER && !rechenfeld.getText().equals("")){
                    auslesen();    
                }
            }
        });
    
    }                                          

    private void hoch2ActionPerformed(java.awt.event.ActionEvent evt) {                                      
        this.rechenfeld.setText(rechenfeld.getText() + "^");
    }                                     

    private void wurzel2ActionPerformed(java.awt.event.ActionEvent evt) {                                        
        this.rechenfeld.setText(rechenfeld.getText() + "√");
    }                                       
    
    private void ClearbuttonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        this.answerLabel.setText("");
        this.rechenfeld.setText("");
    }                                           

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaschenrechnerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Clearbutton;
    private javax.swing.JLabel Titlelabel;
    private javax.swing.JTextArea answerLabel;
    private javax.swing.JButton durchButton;
    private javax.swing.JButton hoch2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton malButton;
    private javax.swing.JButton minusButton;
    private javax.swing.JButton plusButton;
    private javax.swing.JTextField rechenfeld;
    private javax.swing.JButton wurzel2;
    // End of variables declaration                   

    
}
